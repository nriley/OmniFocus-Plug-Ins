/*{

    "type": "action",
    "targets": ["omnifocus"],
    "author": "Nicholas Riley",
    "identifier": "net.sabi.omnifocus.PostponeByDays",
    "version": "1.0.3",
    "description": "Postpone the defer and due dates of the selected task(s) by a certain number of days.",
    "defaultLocale": "en",
    "label": "Postpone By Days...",
    "shortLabel": "Postpone"
}*/
(() => {
    const postponableTasks = tasks => 
        tasks.filter(
            task => (task.deferDate !== null) || (task.dueDate !== null)
        );

    var action = new PlugIn.Action(selection => {
        const parseDays = daysString => { 
            var days = Number.parseInt(daysString);
            if (days != daysString) return 0;
            if (days < 1) return 0;
            return days;
        };

        const dateByAddingDays = days => date => {
            if (date) date.setDate(days + date.getDate());
            return date;
        };

        var tasks = postponableTasks(selection.tasks);

        var inputForm = new Form();
        var daysPrompt = 'Postpone defer/due dates of ' + tasks.length + ' task';
        if (tasks.length > 1) daysPrompt += 's';
        daysPrompt += ' by days';
        var daysField = new Form.Field.String('days', daysPrompt);
        if (Device.current.iOS)
            daysField.keyboardType = KeyboardType.NumberPad;
        inputForm.addField(daysField);
        inputForm.validate = form =>
            parseDays(form.values.days) > 0;

        inputForm.show('Postpone by Days', 'Postpone').then(form => {
            const dateByAddingSpecifiedDays = dateByAddingDays(parseDays(form.values.days));
            tasks.forEach(task => {
                task.deferDate = dateByAddingSpecifiedDays(task.deferDate);
                task.dueDate = dateByAddingSpecifiedDays(task.dueDate);
            });
        });
    });

    action.validate = selection => 
        postponableTasks(selection.tasks).length > 0;

    return action;
})();